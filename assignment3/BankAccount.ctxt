#BlueJ class context
comment0.params=accNumber\ accountName\ accountAddress\ balance
comment0.target=BankAccount(int,\ java.lang.String,\ java.lang.String,\ double)
comment0.text=\r\n\ Constructor\ for\ objects\ of\ class\ BankAccount\ -\r\n\ creates\ \ BankAccount\ object\r\n\ \r\n\ The\ data\ passed\ in\ as\ parameters\ is\ used\ to\ \r\n\ initialise\ the\ instance\ fields\:\ bankName,\ \r\n\ bankManager\ and\ interestRate.\ \ \r\n\ \r\n\ For\ each\ instance\ field\ (except\ holdingBank)\:\r\n\ \ \ \ \ \#\ the\ data\ passed\ in\ as\ a\ parameter\ is\ \r\n\ \ \ \ \ validated\ to\ ensure\ that\ it\ conforms\ to\r\n\ \ \ \ \ the\ rules\ identified\ above.\r\n\ \ \ \ \ \#\ if\ the\ data\ passed\ in\ is\ valid,\ the\r\n\ \ \ \ \ instance\ field\ is\ updated.\r\n\ \ \ \ \ \#\ if\ the\ data\ passed\ in\ is\ invalid,\ a\ \r\n\ \ \ \ \ default\ value\ is\ given\ to\ the\ instance\ \r\n\ \ \ \ \ field\ and\ a\ message\ is\ printed\ out\ the\ terminal\r\n\ \ \ \ \ \ \ letting\ the\ user\ know\ that\ a\ default\ \r\n\ \ \ \ \ \ \ value\ has\ been\ supplied.\r\n\ @param\ accNumber\ account\ number\r\n\ @param\ accountName\ account\ name\r\n\ @param\ accountAddress\ account\ address\r\n\ @param\ balance\ balance\r\n
comment1.params=
comment1.target=BankAccount()
comment1.text=\r\n\ default\ constructor\r\n
comment10.params=numberYears\ rate
comment10.target=double\ projectNewBalance(int,\ double)
comment10.text=\r\n\ This\ method\ calculates\ what\ the\ balance\ of\ \r\n\ the\ account\ WILL\ be\ in\ after\ a\ certain\ number\ of\ years.\ \ \r\n\ \r\n\ Using\ compound\ interest\ and\ the\ instance\ \r\n\ field,\ balance,\ as\ our\ starting\ point,\ \r\n\ we\ calculate\ the\ projected\ balance\ after\ a\ \r\n\ ?numberYears?.\ \r\n\ The\ interest\ rate\ we\ use\ is\ the\ interest\r\n\ rate\ of\ the\ bank\ that\ the\ account\ is\ \r\n\ associated\ with\ (i.e\ holdingBank).\ \r\n\ \r\n\ NOTE\:\ this\ method\ should\ NOT\ change\ the\r\n\ value\ of\ the\ instance\ field,\ balance.\r\n\ \r\n\ @param\ numberYears\ number\ of\ years\r\n\ @param\ rate\ interest\ rate\r\n\ @return\ the\ projected\ new\ balance,\ \r\n\ after\ a\ certain\ number\ of\ years.\ \ \r\n\ If\ the\ user\ entered\ a\ negative\ number\ for\ \r\n\ \ \ \ \ \ \ \ \ numberYears,\ then\ -1\ should\ be\ returned.\r\n
comment11.params=target\ rate
comment11.target=int\ projectHowLong(double,\ double)
comment11.text=\r\n\ This\ method\ calculates\ how\ many\ years\ it\ \r\n\ will\ take\ the\ bank\ account's\ balance\ to\ \r\n\ reach\ (or\ exceed)\ a\ specific\ target\ balance.\r\n\ \r\n\ Using\ the\ same\ compound\ interest\ formula\r\n\ as\ before,\ this\ method\ calculates\ and\ \r\n\ returns\ how\ long\ it\ will\ take\ to\ reach\ the\ \r\n\ target\ value.\ (i.e.\ what\ is\ the\ minimum\ \r\n\ number\ of\ years\ that\ will\ take\ to\ equal\r\n\ or\ exceed\ the\ target\ value)\r\n\ \r\n\ @param\ target\ targeted\ balance\r\n\ @param\ rate\ interest\ rate\r\n\ @return\ the\ number\ of\ years\ it\ would\ take\r\n\ the\ bank\ account\ to\ reach\ (or\ exceed)\ a\ \r\n\ target\ balance.\ \ If\ the\ target\ entered\ is\ less\ \r\n\ than\ the\ current\ balance,\ -1\ should\ be\ returned.\r\n
comment12.params=numberYears\ rate
comment12.target=double\ extendedProjectBalance(int,\ double)
comment12.text=\r\n\ \ \ This\ method\ prints\ out\ the\ projected\ balance\r\n\ \ \ at\ the\ end\ of\ EACH\ year\ from\ the\ start\ upto\r\n\ \ \ the\ year,\ numberYears\ (passed\ as\ a\ parameter).\ \r\n\ \ \ \r\n\ \ \ Using\ compound\ interest\ and\ the\ instance\ \r\n\ \ \ field,\ balance,\ as\ our\ starting\ point,\ we\r\n\ \ \ calculate\ the\ projected\ balance\ after\ a\ ?numberYears?.\ \r\n\ \ \ The\ interest\ rate\ we\ use\ is\ the\ interest\ \r\n\ \ \ rate\ of\ the\ bank\ that\ the\ account\ is\ \r\n\ \ \ associated\ with\ (i.e\ holdingBank).\ \r\n\r\n\ \ \ For\ each\ year\ that\ the\ projected\ balance\ is\r\n\ \ \ calculated,\ it\ is\ printed\ to\ the\ terminal\ window,\r\n\ \ \ along\ with\ the\ year\ in\ question\ e.g.\r\n\ \ \ \ \ \ \ \ \ \ After\ year\ 1,\ the\ projected\ balance\ is\ ?124.56\r\n\ \ \ \ \ \ \ \ \ \ After\ year\ 2,\ the\ projected\ balance\ is\ ?145.56\r\n\ \ \ and\ so\ on.\ \r\n\ \ \ \r\n\ \ \ NOTE\:\ this\ method\ should\ NOT\ change\ the\ \r\n\ \ \ value\ of\ the\ instance\ field,\ balance.\r\n\r\n\ \ \ @param\ numberYears\ number\ of\ year\r\n\ \ \ @param\ rate\ interest\ rate\r\n\ \ \ @return\ the\ (final)\ projected\ new\ balance,\r\n\ \ \ after\ a\ certain\ number\ of\ years.\ \ If\ the\ user\r\n\ \ \ entered\ a\ negative\ number\ for\ \r\n\ \ \ \ \ \ \ \ \ \ \ numberYears,\ then\ -1\ should\ be\ returned.\r\n
comment13.params=amount
comment13.target=void\ withdraw(double)
comment13.text=\r\n\ This\ method\ allows\ the\ bank\ account\ holder\ to\r\n\ withdraw\ their\ money.\r\n\ @param\ amount\ money\ to\ withdraw\r\n
comment14.params=amount
comment14.target=void\ lodge(double)
comment14.text=\r\n\ This\ method\ allows\ the\ bank\ account\ holder\ \r\n\ to\ lodge\ money\ into\ their\ account.\r\n\ @param\ amount\ money\ to\ lodge\r\n
comment15.params=
comment15.target=int\ getAccountCategory()
comment15.text=\r\n\ This\ method\ categorises\ the\ \r\n\ account\ into\ one\ of\ four\ categories.\ \r\n\ \r\n\ If\ the\ balance\ is\:\r\n\ \ \ \ \ \ less\ than\ 100,\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ it\ is\ a\ Category\ 1\ account\r\n\ \ \ \ \ \ between\ 100\ and\ 500,\ \ \ \ \ \ \ \ \ \ \ \ it\ is\ a\ Category\ 2\ account\r\n\ \ \ \ \ \ between\ 500\ and\ 1000,\ \ \ \ \ \ \ \ \ \ \ it\ is\ a\ Category\ 3\ account\r\n\ \ \ \ \ \ greater\ than\ or\ equal\ to\ 1000\ \ \ it\ is\ a\ Category\ 4\ account\r\n\r\n\ @return\ the\ category\ as\ defined\ above.\r\n\ Also\ print\ the\ category\ to\ the\ screen.\r\n
comment16.params=num
comment16.target=double\ toTwoDecimalPlaces(double)
comment16.text=\r\n\ This\ method\ takes\ in\ a\ double\ and\ converts\r\n\ it\ to\ a\ two\ decimal\ place\ double.\ \ \r\n\ This\ newly\ converted\ double\ is\ then\ returned.\r\n\ \r\n\ For\ example\:\r\n\ \ \ \ \ \ if\ we\ have\ a\ variable\ declared\ as\ so\:\r\n\ \ \ \ \ \ \ \ \ \ double\ balance\ \=\ 456.232434432;\r\n\ \ \ \ \ \ and\ we\ call\ the\ following\ code\:\ \ \ \ \r\n\ \ \ \ \ \ \ \ \ \ toTwoDecimalPlaces(balance);\r\n\ \ \ \ \ \ the\ following\ number,\ \r\n\ \ \ \ \ \ of\ type\ double\ will\ be\ returned\:\ \ 456.23\ \r\n
comment17.params=
comment17.target=java.lang.String\ toString()
comment17.text=\r\n\ @return\ the\ String\ version\ of\ the\ bank\ \r\n\ account\ object.\ \ The\ returned\ String\ \r\n\ contains\ labels\ for\ each\ of\ the\ instance\ \r\n\ fields\ \r\n\ and\ is\ formatted\ like\ so\:\r\n\ \ \ \ \ \ \r\n\ \ \ \ \ \ \ \ Account\ number\:\ 222222\r\n\ \ \ \ \ \ \ \ \ \ \ \ Account\ Name\:\ \ \ \ Mary\r\n\ \ \ \ \ \ \ \ \ \ \ \ Account\ Address\:\ WIT\r\n\ \ \ \ \ \ \ \ \ \ \ \ Account\ balance\:\ 1500.0\r\n\ \ \ \ \ \ \ \ \r\n\ \ \ \ \ \ \ \ Bank\ Name\:\ AIB\ Bank\r\n\ \ \ \ \ \ \ \ \ \ \ \ Bank\ Manager\:\ \ Richie\ Manager\r\n\ \ \ \ \ \ \ \ \ \ \ \ Interest\ Rate\:\ 10.0\r\n
comment2.params=
comment2.target=int\ getAccNumber()
comment2.text=\ \r\n\ @return\ the\ account\ number\r\n
comment3.params=naccNumber
comment3.target=void\ setAccNumber(int)
comment3.text=\r\n\ This\ setter\ updates\ the\ instance\ field,\ accNumber,\ \r\n\ based\ on\ the\ rules\ defined\ above.\r\n\ @param\ naccNumber\ new\ account\ number\r\n
comment4.params=
comment4.target=java.lang.String\ getAccountName()
comment4.text=\ \r\n\ @return\ the\ account\ holder's\ name\r\n
comment5.params=naccountName
comment5.target=void\ setAccountName(java.lang.String)
comment5.text=\r\n\ This\ setter\ updates\ the\ instance\ field,\ \r\n\ accountName,\ based\ on\ the\ rules\ defined\ above.\r\n\ @param\ naccountName\ new\ account\ name\r\n
comment6.params=
comment6.target=java.lang.String\ getAccountAddress()
comment6.text=\r\n\ @return\ the\ address\ associated\ with\ the\ bank\ account\r\n
comment7.params=accountAddress
comment7.target=void\ setAccountAddress(java.lang.String)
comment7.text=\r\n\ This\ setter\ updates\ the\ instance\ field,\ \r\n\ accountAddress,\ based\ on\ the\ rules\ defined\ above.\r\n\ @param\ accountAddress\ new\ account\ address\r\n
comment8.params=
comment8.target=double\ getBalance()
comment8.text=\r\n\ @return\ the\ balance\ associated\ with\ the\ bank\ account\r\n
comment9.params=balance
comment9.target=void\ setBalance(double)
comment9.text=\r\n\ This\ setter\ updates\ the\ instance\ field,\ balance,\ \r\n\ based\ on\ the\ rules\ defined\ above.\r\n\ @param\ balance\ new\ balance\r\n
numComments=18
